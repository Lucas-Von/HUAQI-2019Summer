#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sep  3 20:18:28 2019

@author: laiyongjiang
"""


#入参：  1妻子出生年份   float
#   2丈夫出生年份    float
#   3孩子数量    float
#   4老人数量    float
#   5丈夫年收入   float
#   6妻子年收入   float
#   7汽车价值     float
#   8每年的生活消费    float
#   9资产        float
#   10户主年龄     float
#   11是否结婚     0-1变量
#   12投资偏好     float
#   13小孩年龄   [小孩1年龄(float)，小孩2年龄(float)]

#出参：投资数额     float    储蓄数额，      现金数额，    保险数额，        最小金融脆弱性（该数据只用于存放数据库中）
#     储蓄数额     float
#     现金数额     float
#     保险数额      float
#     最小金融脆弱性（该数据只用于存放数据库中）   float


import pandas as pd
import numpy as np
import datetime as dt
import math 
import sys
import json
import os

def financial_fragility(age,asset,car_value,child_born_year,child_num,hus_inborn_year,hus_income,invest_pref,life_cost,marriage,old_num,wife_inborn_year,wife_income):
    year_now=dt.datetime.now().year
    # wife_age=year_now-wife_inborn_year
    # hus_age=year_now-hus_inborn_year
    wife_age=32
    hus_age=33
    child_age=[0]
    
    for i in child_born_year:
        t=year_now-i
        child_age.append(t)
             
    df1=pd.read_excel(os.path.dirname(__file__) + '/金融脆弱性excel数据/死亡概率.xlsx')
    test1_data=[]
    for i in df1.index.values:#获取行号的索引，并对其进行遍历：
        #根据i来获取每一行指定的数据 并利用to_dict转成字典
        row_data=df1.loc[i,['年龄','男','女']].tolist()
        test1_data.append(row_data)
    
    #test结果为[['年龄',男概率，女概率]]
    #丈夫妻子死亡概率
    q1=test1_data[wife_age][2]
    q2=test1_data[hus_age][1]
    
    #家庭成员数量
    n=2+child_num+old_num
    
    #丈夫妻子收入
    y1=wife_income
    y2=hus_income
    y3=y1+y2
    
    #丈夫妻子的人身保险
    if 35 >= wife_age >= 18:
        w=0
    elif 65>= wife_age > 35:
        w=1
    else:
        w=2
    if 35 >= hus_age >= 18:
        h=0
    elif 65>= hus_age > 35:
        h=1
    else:
        h=2
    df2=pd.read_excel(os.path.dirname(__file__) + '/金融脆弱性excel数据/寿险.xlsx',sheet_name=w)
    wife_insurance_data=[]
    for i in df2.index.values:
        row_data=df2.loc[i,['保险名称','保额','调整后价格']].tolist()
        wife_insurance_data.append(row_data)
    df3=pd.read_excel(os.path.dirname(__file__) + '/金融脆弱性excel数据/寿险.xlsx',sheet_name=h)
    hus_insurance_data=[]
    for i in df3.index.values:
        row_data=df3.loc[i,['保险名称','保额','调整后价格']].tolist()
        hus_insurance_data.append(row_data)
        
    #计算妻子丈夫人身保险组合项
    wh=[]
    i=0.03
    m1=65-wife_age
    m2=65-hus_age
    a1=1/i-1/(i*(1+i)**(m1))
    a2=1/i-1/(i*(1+i)**(m2))
    for i in wife_insurance_data:
        for j in hus_insurance_data: 
            t=0
            t=t+q1*(y1*a1-i[1]+i[2])**2+q2*(y2*a2-j[1]+j[2])**2
            if t>0:
                t=t
            else:
                t=0
            wh.append([t,i,j])
    while  '' in wh:
        wh.remove('')
    
    #读取车险
    df4=pd.read_excel(os.path.dirname(__file__) + '/金融脆弱性excel数据/车险.xlsx')
    car_insurance_data=[]
    for i in df4.index.values:
        row_data=df4.loc[i,['保额','年均保费']].tolist()
        car_insurance_data.append(row_data)
    
    #计算车险项
    q3=1-6848/7569#车祸概率
    cost1=car_value*1.5#车祸平均支出
    car=[]
    for i in car_insurance_data: 
        t=q3*n*(cost1-i[0]+i[1])**2
        if t>0:
            t=t
        else:
            t=0
        car.append([t,i])
    
     #读取重疾险
    if 25 >= wife_age >= 20:
        w=0
    elif 35>= wife_age > 25:
        w=1
    elif 45>= wife_age > 35:
        w=2
    else:
        w=3
    if 25 >= hus_age >= 20:
        h=0
    elif 35>= hus_age > 25:
        h=1
    elif 45>= hus_age > 35:
        h=2
    else:
        h=3
    df3_1=pd.read_excel(os.path.dirname(__file__) + '/金融脆弱性excel数据/重疾险.xlsx',sheet_name=w)
    wife_cri_data=[]
    for i in df3_1.index.values:
        row_data=df3_1.loc[i,['保额','年均保费']].tolist()
        wife_cri_data.append(row_data)
    df3_2=pd.read_excel(os.path.dirname(__file__) + '/金融脆弱性excel数据/重疾险.xlsx',sheet_name=h)
    hus_cri_data=[]
    for i in df3_2.index.values:
        row_data=df3_2.loc[i,['保额','年均保费']].tolist()
        hus_cri_data.append(row_data)
    
    
    #计算重疾项
    df4=pd.read_excel(os.path.dirname(__file__) + '/金融脆弱性excel数据/重疾概率.xlsx')
    test1_data=[]
    for i in df4.index.values:#获取行号的索引，并对其进行遍历：
        #根据i来获取每一行指定的数据 并利用to_dict转成字典
        row_data=df4.loc[i,['年龄','男','女']].tolist()
        test1_data.append(row_data)
    #test结果为[[年龄,男概率，女概率]]
    #丈夫妻子重疾概率
    q4_1=test1_data[wife_age][1]
    q4_2=test1_data[hus_age][2]
    
    
    cost2=200000#重疾平均支出
    cri=[]
    for i in hus_cri_data:
        for j in wife_cri_data:
            t=q4_2*(cost2-i[0]+i[1])**2+q4_1*(cost2-j[0]+j[1])**2
            if t>0:
                t=t
            else:
                t=0
            cri.append([t,j,i])     
    
    #医疗险
    med_insurance_data=[[5000,240],[20000,400]]
    
    #计算医疗项
    q5=0.7#生病概率
    cost3=1000*n#医疗平均支出
    med=[]
    for i in med_insurance_data: 
        t=q5*(cost3-i[0]+i[1])**2
        if t>0:
            t=t
        else:
            t=0
        med.append([t,i])  
        
    #计算金融脆弱性
    finance_fragility=[]
    insurance_assembly=[]
    whole_cost=[]
    
    for i in wh:
        for j in car:
            for k in cri:
                for l in med:
                    
                    insurance_cost=i[1][2]+i[2][2]+j[1][1]+k[1][1]+l[1][1]
                    
                    if 1-((insurance_cost/y3)**2)/(0.2**2)>0:
                        m=math.log(1-((insurance_cost/y3)**2)/(0.2**2))
                        penalty_function=(0.2**2)*m
                        if y3-life_cost==0:
                            t=(math.sqrt(i[0]+j[0]+k[0]+l[0]))/y3*0.5-penalty_function
                        else:
                            t=(math.sqrt(i[0]+j[0]+k[0]+l[0]))/(y3-life_cost)-penalty_function
                        finance_fragility.append(t)
                        whole_cost.append(insurance_cost)
                        insurance_assembly.append([i[1],i[2],j[1],k[1],k[2],l[1]])
                    #[i寿险、j车险、k重疾、l医疗,1女主人，2男主人，1单独的为全家庭]
            
    min_finance_fragility=min(finance_fragility)
    h=finance_fragility.index(min_finance_fragility)
    amount_insurance=whole_cost[h]
    
    #老人与小孩的保险配置
    old_insurance=['终身寿险',100000,5258.25]
    child_insurance=[['寿险',100000,100],['重疾险',200000,500]]
    v=0
    u=0
    while amount_insurance < y3*0.2:
        #优先配置老人
        if v<old_num:
            amount_insurance=amount_insurance+old_insurance[2]
            v=v+1
        else:
            break
    while amount_insurance < y3*0.2:
        if u<child_num:
            amount_insurance=amount_insurance+child_insurance[0][2]+child_insurance[1][2]
            u=u+1
        else:
            break
    
    #运行资产配置函数
    if child_num>0:
        child_born=1
    else:
        child_born=0
        
    if max(child_age)>=18:
        child_grown_up=1
    else:
        child_grown_up=0
    
    Asset_allocation(asset,amount_insurance,age,marriage,child_born,child_grown_up,invest_pref,min_finance_fragility)
    
    
def Asset_allocation(asset,amount_insurance,age,marriage,child_born,child_grown_up,invest_pref,min_finance_fragility):
    if marriage == 0:
        amount_risk = 6/9*(asset-amount_insurance)
        amount_deposit = 2/9*(asset-amount_insurance)
        amount_cash = 1/9*(asset-amount_insurance)
    else:
        if child_born == 0:
            amount_risk = 5/9*(asset-amount_insurance)
            amount_deposit = 3/9*(asset-amount_insurance)
            amount_cash = 1/9*(asset-amount_insurance)
        else:
            if child_grown_up == 0:
                amount_risk = 4/9*(asset-amount_insurance)
                amount_deposit = 4/9*(asset-amount_insurance)
                amount_cash = 1/9*(asset-amount_insurance)
            else:
                if age < 60:
                    amount_risk = 4/9*(asset-amount_insurance)
                    amount_deposit = 4/9*(asset-amount_insurance)
                    amount_cash = 1/9*(asset-amount_insurance)
                else:
                    amount_risk = 1/9*(asset-amount_insurance)
                    amount_deposit = 4.5/9*(asset-amount_insurance)
                    amount_cash = 3.5/9*(asset-amount_insurance)

    if invest_pref == 1:
        trans = amount_risk*0.25
        amount_risk = amount_risk-trans
        amount_deposit = amount_deposit+trans
    if invest_pref == 2:
        trans = amount_risk*0.125
        amount_risk = amount_risk-trans
        amount_deposit = amount_deposit+trans
    if invest_pref == 4:
        trans = amount_deposit*0.125
        amount_risk = amount_risk+trans
        amount_deposit = amount_deposit-trans
    if invest_pref == 5:
        trans = amount_deposit*0.25
        amount_risk = amount_risk+trans
        amount_deposit = amount_deposit-trans
    dict={'amount_risk':amount_risk,'amount_deposit':amount_deposit,'amount_cash':amount_cash,'amount_insurance':amount_insurance,'min_finance_fragility':min_finance_fragility}
    #输出   投资数额，    储蓄数额，      现金数额，    保险数额，        最小金融脆弱性（该数据只用于存放数据库中）    
    #print(dict)
    dict_json=json.dumps(dict, cls=NpEncoder)
    print(dict_json)
    return 0
    #return(dict_json)
    
def vulnerability_json(vulnerability_json):
    #print(vulnerability_json)
    c=json.loads(vulnerability_json)
    v=list(c.values())
    return financial_fragility(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8],v[9],v[10],v[11],v[12])

class NpEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, np.integer):
            return int(obj)
        elif isinstance(obj, np.floating):
            return float(obj)
        elif isinstance(obj, np.ndarray):
            return obj.tolist()
        else:
            return super(NpEncoder, self).default(obj)

if __name__=='__main__':
    vulnerability_json(sys.argv[1])
    
        